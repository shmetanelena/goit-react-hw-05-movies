{"version":3,"file":"static/js/122.14b5fd3b.chunk.js","mappings":"qNAwBA,EArBgB,WACd,IAAMA,GAAUC,EAAAA,EAAAA,GAAiBC,EAAAA,EAAAA,iBAEjC,OACE,6BACGF,EAAQG,OAAS,GAChB,wBACGH,EAAQI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,SAOb,wE,sFCfKJ,EAAmB,SAAAO,GAC9B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRN,EAAWC,GAASM,KAAKF,GAASG,MAAMC,QAAQC,SAC/C,CAACV,EAAYC,IAETG,I,yECRHO,EAAS,CAAEC,I,QAAKC,K,SAEhBC,EAAU,mCACVC,EAAW,+BAQXC,EAAW,mCAAG,+FACZC,EAAS,IAAIC,gBAAgB,CACjCC,QAASL,EACTM,KAAM,IAHU,SAKKC,IAAAA,IAAA,UAAaN,EAAb,+BAA4CE,IALjD,cAKZK,EALY,OAMZlB,EAAOkB,EAASlB,KANJ,kBAOXA,EAAKmB,SAPM,2CAAH,qDAUXC,EAAW,mCAAG,WAAMC,GAAN,kFACZR,EAAS,IAAIC,gBAAgB,CACjCC,QAASL,EACTM,KAAM,EACNK,MAAOA,IAJS,SAMKJ,IAAAA,IAAA,UAAaN,EAAb,yBAAsCE,IAN3C,cAMZK,EANY,OAOZlB,EAAOkB,EAASlB,KAPJ,kBAQXA,EAAKmB,SARM,2CAAH,sDAWXG,EAAQ,mCAAG,WAAM7B,GAAN,kFACToB,EAAS,IAAIC,gBAAgB,CACjCC,QAASL,IAFI,SAIQO,IAAAA,IAAA,UAAaN,EAAb,kBAA+BlB,EAA/B,YAAqCoB,IAJ7C,cAITK,EAJS,OAKTlB,EAAOkB,EAASlB,KALP,kBAMRA,GANQ,2CAAH,sDASRuB,EAAY,mCAAG,WAAM9B,GAAN,kFACboB,EAAS,IAAIC,gBAAgB,CACjCC,QAASL,IAFQ,SAIIO,IAAAA,IAAA,UAAaN,EAAb,kBAA+BlB,EAA/B,oBAA6CoB,IAJjD,cAIbK,EAJa,OAKblB,EAAOkB,EAASlB,KALH,kBAMZA,EAAKwB,MANO,2CAAH,sDASZC,EAAe,mCAAG,WAAMhC,GAAN,kFAChBoB,EAAS,IAAIC,gBAAgB,CACjCC,QAASL,IAFW,SAICO,IAAAA,IAAA,UAAaN,EAAb,kBAA+BlB,EAA/B,oBAA6CoB,IAJ9C,cAIhBK,EAJgB,OAKhBlB,EAAOkB,EAASlB,KALA,kBAMfA,EAAKmB,SANU,2CAAH,sDASf7B,EAAM,CACVsB,YAAAA,EACAQ,YAAAA,EACAE,SAAAA,EACAI,YAzDkB,SAACC,EAAMC,GACzB,IAAMC,EAAOD,EAAQ,MAAQ,OAC7B,OAAOD,EAAI,UAJW,6BAIX,YAAyBE,GAAzB,OAAgCF,GAASpB,EAAOsB,IAwD3DN,aAAAA,EACAE,gBAAAA,GAGF,O","sources":["components/Reviews/Reviews.jsx","hooks/useDataByMovieId.js","services/tmdb.js"],"sourcesContent":["import { useDataByMovieId } from 'hooks/useDataByMovieId';\nimport api from 'services/tmdb';\n\nconst Reviews = () => {\n  const reviews = useDataByMovieId(api.getMovieReviews);\n\n  return (\n    <section>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h5>Author: {author}</h5>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useDataByMovieId = dataLoader => {\n  const { movieId } = useParams();\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    dataLoader(movieId).then(setData).catch(console.error);\n  }, [dataLoader, movieId]);\n\n  return data;\n};\n","import axios from 'axios';\nimport w92 from '../images/w92.jpg';\nimport w154 from '../images/w154.jpg';\nconst images = { w92, w154 };\n\nconst API_KEY = 'c1c0e09e2b2780ccf5e67712da2ef6c9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p';\n\nconst getImageUrl = (path, small) => {\n  const size = small ? 'w92' : 'w342';\n  return path ? `${IMAGES_BASE_URL}/${size}${path}` : images[size];\n};\n\nconst getTrending = async () => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    page: 1,\n  });\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst searchMovie = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    page: 1,\n    query: query,\n  });\n  const response = await axios.get(`${BASE_URL}/search/movie?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst getMovie = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}?${params}`);\n  const data = response.data;\n  return data;\n};\n\nconst getMovieCast = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits?${params}`);\n  const data = response.data;\n  return data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst api = {\n  getTrending,\n  searchMovie,\n  getMovie,\n  getImageUrl,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default api;\n"],"names":["reviews","useDataByMovieId","api","length","map","id","author","content","dataLoader","movieId","useParams","useState","data","setData","useEffect","then","catch","console","error","images","w92","w154","API_KEY","BASE_URL","getTrending","params","URLSearchParams","api_key","page","axios","response","results","searchMovie","query","getMovie","getMovieCast","cast","getMovieReviews","getImageUrl","path","small","size"],"sourceRoot":""}
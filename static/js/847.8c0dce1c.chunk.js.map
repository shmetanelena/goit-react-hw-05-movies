{"version":3,"file":"static/js/847.8c0dce1c.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/tmdb.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const loaction = useLocation();\n\n  return (\n    <main>\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: loaction }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieList;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ onSubmit, queryInit }) => {\n  const [query, setQuery] = useState(queryInit);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return;\n    }\n    onSubmit(query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={e => setQuery(e.currentTarget.value)}\n        value={query}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  queryInit: PropTypes.string.isRequired,\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport api from 'services/tmdb';\nimport SearchForm from 'components/SearchForm';\nimport MovieList from 'components/MovieList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  let query = searchParams.get('query') ?? '';\n\n  const handleSubmit = q => {\n    if (query !== q) {\n      query = q;\n      const params = query !== '' ? { query } : {};\n      setSearchParams(params);\n    }\n  };\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    api.searchMovie(query).then(setMovies).catch(console.error);\n  }, [query]);\n\n  return (\n    <main>\n      <SearchForm onSubmit={handleSubmit} queryInit={query} />\n      {movies.length > 0 && <MovieList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport w92 from '../images/w92.jpg';\nimport w154 from '../images/w154.jpg';\nconst images = { w92, w154 };\n\nconst API_KEY = 'c1c0e09e2b2780ccf5e67712da2ef6c9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p';\n\nconst getImageUrl = (path, small) => {\n  const size = small ? 'w92' : 'w342';\n  return path ? `${IMAGES_BASE_URL}/${size}${path}` : images[size];\n};\n\nconst getTrending = async () => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    page: 1,\n  });\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst searchMovie = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    page: 1,\n    query: query,\n  });\n  const response = await axios.get(`${BASE_URL}/search/movie?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst getMovie = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}?${params}`);\n  const data = response.data;\n  return data;\n};\n\nconst getMovieCast = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits?${params}`);\n  const data = response.data;\n  return data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews?${params}`);\n  const data = response.data;\n  return data.results;\n};\n\nconst api = {\n  getTrending,\n  searchMovie,\n  getMovie,\n  getImageUrl,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default api;\n"],"names":["movies","loaction","useLocation","length","map","id","title","to","state","from","onSubmit","queryInit","useState","query","setQuery","e","preventDefault","trim","type","onChange","currentTarget","value","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","api","then","catch","console","error","q","MovieList","images","w92","w154","API_KEY","BASE_URL","getTrending","params","URLSearchParams","api_key","page","axios","response","data","results","searchMovie","getMovie","getMovieCast","cast","getMovieReviews","getImageUrl","path","small","size"],"sourceRoot":""}